
import hashlib
import os

def calculate_hashes(file_path):
    hashes = {
        'md5': hashlib.md5(),
        'sha1': hashlib.sha1(),
        'sha256': hashlib.sha256()
    }
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            for hash_algo in hashes.values():
                hash_algo.update(chunk)
    return {name: hash_algo.hexdigest() for name, hash_algo in hashes.items()}

def check_file_size(file_path):
    return os.path.getsize(file_path)

def check_file_extension(file_path):
    _, extension = os.path.splitext(file_path)
    return extension.lower()

def signature_scan(file_path, signatures):
    with open(file_path, 'rb') as f:
        file_content = f.read()
    for signature in signatures:
        if signature in file_content:
            return True
    return False

def analyze_file(file_path):
    results = {}
    results['hashes'] = calculate_hashes(file_path)
    results['size'] = check_file_size(file_path)
    results['extension'] = check_file_extension(file_path)
    signatures = [
        b'\x4d\x5a',  # MZ header (Windows PE)
        b'\x50\x4b\x03\x04',  # ZIP
        b'\x7f\x45\x4c\x46'  # ELF (Linux)
    ]
    results['suspicious'] = signature_scan(file_path, signatures)
    return results

if __name__ == "__main__":
    file_path = 'example_file.exe'  # Replace with the path to the file you want to analyze
    results = analyze_file(file_path)

    print("Analysis Results:")
    print(f"Hashes: {results['hashes']}")
    print(f"Size: {results['size']} bytes")
    print(f"Extension: {results['extension']}")
    print(f"Suspicious Content: {'Yes' if results['suspicious'] else 'No'}")
